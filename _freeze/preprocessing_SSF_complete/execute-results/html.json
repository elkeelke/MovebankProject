{
  "hash": "dfefeca47d1de824fc6aac7fac7c6bb2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"SSF\"\nformat: html\nfreeze: auto\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# 0. Setup ----------------------------------------------------------------\n# Load libraries\npacman::p_load(\n  tidyverse,\n  amt,\n  sf,\n  geosphere,\n  terra,\n  MASS,\n  glmmTMB,\n  emmeans,\n  paletteer,\n  gratia,\n  ggridges,\n  performance\n)\n\n# Set options\noptions(scipen = 999) # Turn off scientific notation\noptions(digits = 15) # Set digits to 15 to ensure GPS coordinates aren't truncated\nnt = parallel::detectCores() - 2 # Set number of threads for modelling\n\n# Define common plot theme\ntheme_publication_dark <- function(base_size = 14, legend_position = \"bottom\") {\n  theme_minimal(base_size = base_size) +\n    theme(\n      legend.position = legend_position,\n      text = element_text(color = \"white\"),\n      axis.text = element_text(color = \"white\"),\n      panel.background = element_rect(fill = \"#222222\", color = NA),\n      plot.background  = element_rect(fill = \"#222222\", colour = NA),\n      panel.grid = element_line(color = \"#424242\"), \n      legend.background = element_rect(fill = \"#222222\", color = NA),\n      legend.key = element_rect(fill = \"#222222\", color = NA),\n      strip.text = element_text(color = \"white\", size = 10),\n      plot.title = element_text(margin = margin(b = 15)),\n      axis.title.x = element_text(margin = margin(t = 15)),\n      axis.title.y = element_text(margin = margin(r = 15)),\n      plot.margin = margin(20, 20, 20, 20, unit = \"pt\")\n    )\n}\n\n# Define color palette\nlanduse_colors <- paletteer_d(\"nationalparkcolors::Badlands\") |> \n  setNames(c(\"Water\", \"Cropland\", \"BuiltUp\", \"TreeCover\", \"Open\"))\n\n# 1. Data Preparation -----------------------------------------------------\n# 1.1 Load, visualize and filter raw tracking data ------------------------\ntracking_data <- read_delim(\"data/bobcat_coyotes_wa_gps.csv\") |> \n  dplyr::rename(\n    long = `location-long`, \n    lat = `location-lat`,\n    id = `individual-local-identifier`,\n    timestamp = `timestamp`,\n    species = `individual-taxon-canonical-name`) |> \n  dplyr::arrange(id, timestamp) |> \n  dplyr::select(id, species, timestamp, lat, long) |> \n  # Filter out MVBOB71M after dispersal\n  dplyr::filter(!(id == \"MVBOB71M\" & timestamp > as.POSIXct(\"2019-09-24 00:00:00\")))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 121706 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): gps:fix-type-raw, mortality-status, sensor-type, individual-taxon-...\ndbl  (6): event-id, location-long, location-lat, gps:hdop, gps:satellite-cou...\nlgl  (1): visible\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# 1.2 Create amt tracks ---------------------------------------------------\ntrack <- tracking_data |>\n  nest(data = c(-id, -species)) |>\n  mutate(trk = map(data, ~ make_track(.x, long, lat, timestamp, crs = 4326)))\n\n# Summarize sampling rate\ntrackSummary <- track |> \n  mutate(sr = lapply(trk, summarize_sampling_rate, time_unit = \"hour\")) |> \n  dplyr::select(id, sr) |> \n  unnest(cols = sr) |>\n  left_join(distinct(dplyr::select(tracking_data, id, species))) |>\n  arrange(species, median)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(trackSummary, n = 70)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 70 × 11\n   id          min    q1 median  mean    q3   max     sd     n unit  species    \n   <chr>     <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>  <dbl> <int> <chr> <chr>      \n 1 MVCOY100F 3.98    4     4     4.16  4     12    0.855   634 hour  Canis latr…\n 2 MVCOY18F  3.93    4     4     4.56  4     68    2.70   2383 hour  Canis latr…\n 3 MVCOY56M  3.98    4     4     4.11  4     12    0.739  1291 hour  Canis latr…\n 4 MVCOY58M  3.97    4     4     4.22  4     20    1.15   3596 hour  Canis latr…\n 5 MVCOY59F  3.95    4     4     4.24  4     20    1.22   1217 hour  Canis latr…\n 6 MVCOY60M  3.93    4     4     4.61  4     60    2.46   2956 hour  Canis latr…\n 7 MVCOY63M  3.95    4     4     4.32  4     24    1.57   3615 hour  Canis latr…\n 8 MVCOY68F  3.93    4     4     4.56  4    316    5.74   6882 hour  Canis latr…\n 9 MVCOY72F  3.98    4     4     4.91  4     16    2.14     75 hour  Canis latr…\n10 MVCOY73M  3.95    4     4     4.59  4    160    3.51   2737 hour  Canis latr…\n11 MVCOY74M  3.97    4     4     4.64  4     28    2.09    793 hour  Canis latr…\n12 MVCOY79F  3.93    4     4     4.31  4     36    1.61   3625 hour  Canis latr…\n13 MVCOY81M  3.93    4     4     4.33  4     20    1.47   2963 hour  Canis latr…\n14 MVCOY82M  3.93    4     4     4.64  4     40    2.19   1349 hour  Canis latr…\n15 MVCOY92M  3.97    4     4     4.27  4     40    1.67   1426 hour  Canis latr…\n16 MVCOY97M  3.95    4     4     4.60  4     16    1.72    731 hour  Canis latr…\n17 MVCOY98M  3.95    4     4     4.44  4     16    1.52   1512 hour  Canis latr…\n18 NECOY14M  3.93    4     4     4.40  4     12    1.47     91 hour  Canis latr…\n19 NECOY17M  3.97    4     4     4.09  4     12    0.602  1989 hour  Canis latr…\n20 NECOY1F   1.32    4     4     4.44  4     48    2.08   2917 hour  Canis latr…\n21 NECOY20F  3.97    4     4     4.43  4     48    2.11   1483 hour  Canis latr…\n22 NECOY21F  3.93    4     4     4.62  4     76    2.47   3470 hour  Canis latr…\n23 NECOY29M  3.93    4     4     4.98  4    192    5.03   1905 hour  Canis latr…\n24 NECOY2M   0.483   4     4     4.11  4     16    0.768  3974 hour  Canis latr…\n25 NECOY31M  3.95    4     4     4.71  4     16    2.04    564 hour  Canis latr…\n26 NECOY36M  3.95    4     4     4.15  4     16    0.869  3254 hour  Canis latr…\n27 NECOY3F   3.95    4     4     4.60  4     40    2.02   2954 hour  Canis latr…\n28 NECOY42F  3.97    4     4     6.13  8     24    3.79    158 hour  Canis latr…\n29 NECOY43F  1.83    4     4     7.40  8     76    5.37   2083 hour  Canis latr…\n30 NECOY44M  3.93    4     4     4.89  4     68    2.55   3694 hour  Canis latr…\n31 NECOY4M   3.95    4     4     4.30  4     24    1.40   3417 hour  Canis latr…\n32 NECOYaF   3.95    4     4     4.28  4     24    1.51   2769 hour  Canis latr…\n33 MVCOY65M  4      12    24    43.4  60    172.  43.5     242 hour  Canis latr…\n34 NECOY12F  3.98   20.0  24    46.9  48    344.  51.4     110 hour  Canis latr…\n35 MVBOB51M  3.93    4     4     7.57  8     56    5.94   1259 hour  Lynx rufus \n36 MVBOB52M  3.93    4     4     5.87  8     44    3.94   2214 hour  Lynx rufus \n37 MVBOB54F  3.95    4     4     5.12  4     76    3.83    997 hour  Lynx rufus \n38 MVBOB55M  3.93    4     4     9.11 12    108    8.94    950 hour  Lynx rufus \n39 MVBOB62M  3.93    4     4     4.68  4     68    2.80   1746 hour  Lynx rufus \n40 MVBOB66M  3.93    4     4     5.04  4     48    2.66   3000 hour  Lynx rufus \n41 MVBOB67M  2.62    4     4     6.42  8     94.8  4.99   2209 hour  Lynx rufus \n42 MVBOB69F  2.6     4     4     8.53 12    132    7.78   1575 hour  Lynx rufus \n43 MVBOB71M  3.97    4     4     5.12  4     28.0  2.75   1932 hour  Lynx rufus \n44 MVBOB85F  3.93    4     4     5.29  4     52    4.02   1526 hour  Lynx rufus \n45 MVBOB90M  3.93    4     4     5.05  4     44    3.00   1041 hour  Lynx rufus \n46 MVBOB99F  3.93    4     4     7.56  8     84    6.86    372 hour  Lynx rufus \n47 NEBOB13F  3.33    4     4     7.63  8    152.   7.39   1722 hour  Lynx rufus \n48 NEBOB35M  3.93    4     4     5.04  4     36    2.51   1589 hour  Lynx rufus \n49 NEBOB38M  2.22    4     4     5.18  4     32.0  2.91   2442 hour  Lynx rufus \n50 NEBOB41F  3.93    4     4    12.8   9.03 908   43.9     988 hour  Lynx rufus \n51 NEBOB45M  3.03    4     4     4.82  4     28    2.31   1606 hour  Lynx rufus \n52 NEBOB5M   3.95    4     4     7.47  8     72    6.27    832 hour  Lynx rufus \n53 NEBOB6F   3.93    4     4     4.91  4     44    2.87   2552 hour  Lynx rufus \n54 NEBOB7F   0.467   4     4     5.08  4.02 104.   4.18   2629 hour  Lynx rufus \n55 NEBOB32F  2.27    4     4.05  8.49 11.9  104.   7.42   1176 hour  Lynx rufus \n56 MVBOB83M  3.08    4     4.07  8.89 12    120    7.86   1592 hour  Lynx rufus \n57 MVBOB76M  2.8     4     7.95  8.62 12    100    7.15   1647 hour  Lynx rufus \n58 MVBOB77M  3.93    4     8    12.7  16    268   15.4    1045 hour  Lynx rufus \n59 MVBOB80M  3.93    4     8     9.81 12    196   12.1    1423 hour  Lynx rufus \n60 NEBOB10F  3.93    4     8    11.1  12    272   16.6    1222 hour  Lynx rufus \n61 NEBOB11M  4       4     8    11.7  18     48   11.1      27 hour  Lynx rufus \n62 NEBOB16M  3.93    4     8     8.50 12     84    6.76   1273 hour  Lynx rufus \n63 NEBOB23M  3.93    4     8     9.95 12    308   13.1    1395 hour  Lynx rufus \n64 NEBOB25F  3.93    4     8     9.47 12    100    8.23   1515 hour  Lynx rufus \n65 NEBOB33M  1.72    4     8    14.2  16    544   30.2     929 hour  Lynx rufus \n66 NEBOB37M  3.93    4     8    11.2  12    104   11.5     655 hour  Lynx rufus \n67 MVBOB91M  4       4    12    11.7  18     24    7.48     15 hour  Lynx rufus \n68 NEBOB8M   3.93    4    12    17.2  20    268   21.9     383 hour  Lynx rufus \n69 MVBOB88M  3.93    8    16    22.4  28.0  172.  24.1     554 hour  Lynx rufus \n70 MVBOB87M  3.95   16.0  40    53.8  71.0  336   54.6     126 hour  Lynx rufus \n```\n\n\n:::\n\n```{.r .cell-code}\n# Get the individual sampling rates, for plotting\ntrackSummarySamples <- track |>\n  mutate(sr = lapply(trk, summarize_sampling_rate, time_unit = \"hour\", summarize = FALSE)) |>\n  dplyr::select(id, sr) |>\n  unnest(cols = sr) |>\n  mutate(species = ifelse(grepl(\"BOB\", id), \"Bobcat\", \"Coyote\"))\n\nggplot(trackSummarySamples,\n       aes(x = species, y = sr,\n           fill  = species, \n           color = species)) +\n  stat_boxplot(geom = \"errorbar\", width = 0.4, linewidth = 0.7) +\n  geom_boxplot(outlier.shape = NA, linewidth = 0.7) +\n  scale_fill_manual(values  = c(Bobcat = \"#723735\")) +\n  scale_color_manual(values = c(Bobcat = \"#DB4743FF\",  Coyote = \"#5495CFFF\")) +\n  labs(x = NULL, y = \"Sampling interval in hours\") +\n  coord_cartesian(ylim = c(0, 15)) +\n  theme_publication_dark() +\n  theme_publication_dark(legend_position = \"none\") +\n  theme(panel.grid.major.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](preprocessing_SSF_complete_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#GPS sampling interval by species (outliers hidden)\nggsave(\"img/bobcat_coyote_sampling_rates.png\", width = 5, height = 4, dpi = 300)\n\nggplot(trackSummarySamples,\n       aes(x = species, y = sr,\n           fill  = species,\n           color = species)) +\n  geom_boxplot(outlier.alpha = 0.5, width = 0.7, linewidth = 0.7) +                   \n  scale_color_manual(values = c(Bobcat = \"#DB4743FF\",  Coyote = \"#5495CFFF\")) +\n  labs(x = NULL, y = \"Sampling interval in hours\") +\n  coord_cartesian(ylim = c(0, 1000)) +\n  theme_publication_dark(legend_position = \"none\") +\n  theme(panel.grid.major.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](preprocessing_SSF_complete_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#GPS sampling interval by species (outliers shown)\nggsave(\"img/bobcat_coyote_sampling_rates_outliers.png\", width = 5, height = 4, dpi = 300)\n\n# Split into species\ncoyote <- filter(track, grepl(\"COY\", id))\nbobcat <- filter(track, grepl(\"BOB\", id))\n\n# 1.3 Resample tracks and generate steps ----------------------------------\n# Omitting coyote in row 8 and 19; too few consecutive data points - causing function to fail\ncoyote1 <- coyote[-c(8, 19), ] |> \n  mutate(stp = map(trk, function(df)\n    df |> \n      track_resample(rate = hours(4), tolerance = minutes(10)) |> \n      steps_by_burst() |> \n      random_steps(n_control = 10) %>% \n      mutate(log_sl_ = log(sl_ + 1), cos_ta_ = cos(ta_)))) |> \n  dplyr::select(-data, -trk) |> \n  unnest(cols = stp) |> \n  mutate(case_binary_ = ifelse(case_ == TRUE, 1, 0))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 181 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `stp = map(...)`.\nCaused by warning in `random_steps.bursted_steps_xyt()`:\n! Some bursts contain < 3 steps and will be removed\nℹ Run `dplyr::last_dplyr_warnings()` to see the 180 remaining warnings.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Omitting bobcat in row 15 and 18; too few consecutive data points - causing function to fail\nbobcat1 <- bobcat[-c(15, 18), ] |> \n  mutate(stp = map(trk, function(df)\n    df |> \n      track_resample(rate = hours(8), tolerance = minutes(10)) |> \n      steps_by_burst() |>  \n      random_steps(n_control = 10) |> \n      mutate(log_sl_ = log(sl_ + 1), cos_ta_ = cos(ta_)))) |> \n  dplyr::select(-data, -trk) |> \n  unnest(cols = stp) |> \n  mutate(case_binary_ = ifelse(case_ == TRUE, 1, 0))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 240 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `stp = map(...)`.\nCaused by warning in `random_steps.bursted_steps_xyt()`:\n! Some bursts contain < 3 steps and will be removed\nℹ Run `dplyr::last_dplyr_warnings()` to see the 239 remaining warnings.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Save resampled step data\nsaveRDS(coyote1, \"data/coyote_resampled.rds\")\nsaveRDS(bobcat1,  \"data/bobcat_resampled.rds\")\n\n# Function to recalculate step lengths (in meters)\nrecalc_steps <- function(file) {\n  readRDS(file) |>\n    dplyr::select(-log_sl_, -sl_) |>\n    mutate(\n      sl_ = distGeo(across(c(x1_, y1_)), across(c(x2_, y2_))),\n      log_sl_ = log(sl_)\n    )\n}\n\n# Apply to saved data\ncoyote_resampled <- recalc_steps(\"data/coyote_resampled.rds\")\nbobcat_resampled <- recalc_steps(\"data/bobcat_resampled.rds\")\n\n# 1.4 Load covariates, extract to steps -----------------------------------\n# Load and prepare rasters\nhfp <- rast(\"data/HFP_washington.tif\")\nNAflag(hfp) <- 64536  # Set no-data value\nhfp_capped <- classify(hfp, matrix(c(50000, Inf, 50000), ncol = 3, byrow = TRUE)) # Cap at 50k\nhfp_scaled <- hfp_capped/1000 # Scale to 0-50\nland_use <- rast(\"data/ESA_washington.tif\")\n\n# Land use class labels (ESA WorldCover 2021)\nesa_labels <- c(\n  \"10\" = \"Tree cover\", \"20\" = \"Shrubland\", \"30\" = \"Grassland\",\n  \"40\" = \"Cropland\", \"50\" = \"Built-up\", \"60\" = \"Bare or sparse vegetation\",\n  \"70\" = \"Snow and ice\", \"80\" = \"Permanent water bodies\",\n  \"90\" = \"Herbaceous wetland\", \"95\" = \"Mangroves\", \"100\" = \"Moss and lichen\"\n)\n\n# Function to extract covariates\nextract_covariates <- function(df) {\n  df |>\n    mutate(\n      human_footprint = terra::extract(hfp_scaled, cbind(x2_, y2_))[, 1],\n      land_use_code = terra::extract(land_use, cbind(x2_, y2_))[, 1],\n      land_use = factor(land_use_code, levels = names(esa_labels), labels = esa_labels)\n    )\n}\n\n# Apply extraction to step data\ncoyote_cov <- extract_covariates(coyote_resampled)\nbobcat_cov <- extract_covariates(bobcat_resampled)\n\n# 1.5 Finalize SSF dataset ------------------------------------------------\n# Function to format for SSF\nprepare_ssf_data <- function(df) {\n  df |>\n    mutate(\n      land_use = as.factor(land_use),\n      # Group detailed land use categories into broader, ecologically meaningful classes\n      land_use_grouped = fct_collapse(\n        land_use, \n        \"TreeCover\" = \"Tree cover\",\n        \"Open\"      = c(\"Grassland\", \"Bare or sparse vegetation\", \"Moss and lichen\"),\n        \"Cropland\"  = \"Cropland\",\n        \"BuiltUp\"   = \"Built-up\",\n        \"Water\"     = c(\"Permanent water bodies\", \"Herbaceous wetland\")\n      ),\n      # Create unique stratum ID (animal ID + step ID) for conditional logistic model\n      step_id_ = paste(id, step_id_, sep = \"_\")\n    ) |>\n    group_by(id) |>\n    mutate(n = n() / 11) |> # Calculate number of steps (1 used + 10 available per stratum)\n    ungroup()\n}\n\n# Applying to data\ncoyote_final <- prepare_ssf_data(coyote_cov)\nbobcat_final <- prepare_ssf_data(bobcat_cov)\n\n# Summary of bobcat SSF data revealed too few relocations in key habitat types\n# and inconsistent sampling intervals compared to coyotes.\n# Therefore, bobcats are excluded from further SSF modeling.\n\n# Save processed data\nsaveRDS(coyote_final, \"data/coyote_ssf_data.rds\")\nsaveRDS(bobcat_final, \"data/bobcat_ssf_data.rds\")\n\n# 2. Exploratory Data Analysis --------------------------------------------\n# Read processed data\ncoyote_ssf_data <- readRDS(\"data/coyote_ssf_data.rds\")\n\n# Set secondary colors\nlanduse_colors_sec <- c(\"TreeCover\" = \"#4c5133\",\n                        \"Open\"      = \"#807c70\", \n                        \"Cropland\"  = \"#7d6139\",\n                        \"BuiltUp\"   = \"#723735\", \n                        \"Water\"     = \"#3c566e\")\n\n# 2.1 Ridgeline plot (HFP across land cover classes) ----------------------\nggplot(coyote_ssf_data,\n       aes(x = human_footprint, y = fct_rev(land_use_grouped),\n           fill = land_use_grouped, color = land_use_grouped)) +\n  geom_density_ridges(scale = 1.2) +\n  scale_fill_manual(values = landuse_colors_sec) + \n  scale_color_manual(values = landuse_colors) +\n  labs(x = \"Human footprint index (0–50)\", y = \"Land cover type\") +\n  theme_publication_dark(legend_position = \"none\") +\n  theme(panel.grid.major.y = element_blank())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 0.417\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](preprocessing_SSF_complete_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n\n```{.r .cell-code}\n#Human Footprint Distribution by Land Cover Type\nggsave(\"img/coyote_EDA_ridgeline.png\", width = 10, height = 5.5, dpi = 300)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 0.417\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2.2 Boxplot (HFP across land cover classes) -----------------------------\nggplot(coyote_ssf_data,\n       aes(x = land_use_grouped, y = human_footprint,\n           fill = land_use_grouped, color = land_use_grouped)) +\n  stat_boxplot(geom = \"errorbar\", width = 0.4, linewidth = 0.7) +\n  geom_boxplot(outlier.alpha = 0.15, outlier.size = 0.5, \n               width = 0.7, alpha = 1, linewidth = 0.5) +\n  scale_fill_manual(values = landuse_colors_sec) + \n  scale_color_manual(values = landuse_colors) +\n  labs(x = \"Land cover type\", y = \"Human footprint index (0–50)\") +\n  theme_publication_dark(legend_position = \"none\") +\n  theme(panel.grid.major.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](preprocessing_SSF_complete_files/figure-html/unnamed-chunk-1-4.png){width=672}\n:::\n\n```{.r .cell-code}\n#Variation in Human Footprint across Land Cover Types\nggsave(\"img/coyote_EDA_boxplot.png\", width = 10, height = 5.5, dpi = 300)\n\n# 2.3 Bi-variate density plot (HFP vs. log step length) -------------------\ndens <- kde2d(coyote_ssf_data$human_footprint, coyote_ssf_data$log_sl_, n = 100)\ncontour_level <- quantile(dens$z, probs = 0.95)  # Get 95% density threshold\n\nggplot(coyote_ssf_data, aes(x = human_footprint, y = log_sl_)) +\n  geom_bin2d(aes(fill = after_stat(log(density))), bins = 70) +\n  scale_fill_viridis_c(option = \"D\", limits = c(-14.9, -1)) +\n  geom_vline(xintercept = 0, colour = \"gray80\", linewidth = 0.6) +\n  geom_hline(yintercept = 0, colour = \"gray80\", linewidth = 0.6) +\n  stat_density_2d(aes(colour = after_stat(level)), breaks = contour_level,\n                  colour = \"red\", h = 2, linewidth = 0.75) +\n  labs(x = \"Human footprint index (0–50)\", y = \"Log step length\") +\n  theme_publication_dark(legend_position = \"right\")\n```\n\n::: {.cell-output-display}\n![](preprocessing_SSF_complete_files/figure-html/unnamed-chunk-1-5.png){width=672}\n:::\n\n```{.r .cell-code}\n#Relationship between Movement and Human Footprint\nggsave(\"img/coyote_EDA_hexbin.png\", width = 10, height = 6, dpi = 300)\n\n# 3. Coyote SSF Modeling --------------------------------------------------\n# Read SSF ready data and filter\ncoyote_ssf_data <- readRDS(\"data/coyote_ssf_data.rds\") |> \n  filter(n > 100) # Select animals with more than 100 fixes\n\n# Standardize HFP for modeling\ncoyote_ssf_data$hfp_std <- scale(coyote_ssf_data$human_footprint)[, 1]\n\n# 3.1 Fit the model -------------------------------------------------------\n# Fit SSF with glmmTMB following Muff et al. (2019)\nssf_coyote <- glmmTMB(\n  case_binary_ ~ -1 + \n    land_use_grouped * (hfp_std + I(hfp_std^2)) + \n    log_sl_ + \n    (0 + land_use_grouped + hfp_std + I(hfp_std^2) + log_sl_|| id) +\n    (1 | step_id_),\n  family = poisson,\n  doFit = TRUE,\n  data = coyote_ssf_data,\n  map = list(theta = factor(c(1:8, NA))),\n  start = list(theta = c(rep(0, times = 8),log(1e3))),\n  control = glmmTMBControl(parallel = nt)\n)\n\n# 3.2 Save fitted model ---------------------------------------------------\nsaveRDS(ssf_coyote, file = \"models/ssf_coyote_model.rds\")\nssf_coyote <- readRDS(\"models/ssf_coyote_model.rds\")\n\n# 3.3 Summarize / check model ---------------------------------------------\n# Print model summary (fixed effects, random effects, fit statistics)\nsummary(ssf_coyote)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: poisson  ( log )\nFormula:          \ncase_binary_ ~ -1 + land_use_grouped * (hfp_std + I(hfp_std^2)) +  \n    log_sl_ + (0 + land_use_grouped + hfp_std + I(hfp_std^2) +  \n    log_sl_ || id) + (1 | step_id_)\nData: coyote_ssf_data\n\n      AIC       BIC    logLik -2*log(L)  df.resid \n1244867.3 1245141.1 -622409.6 1244819.3    666224 \n\nRandom effects:\n\nConditional model:\n Groups   Name                      Variance                     \n id       land_use_groupedTreeCover       0.055569998248869663382\n          land_use_groupedOpen            0.000001026267180479060\n          land_use_groupedCropland        0.092887072052416586043\n          land_use_groupedBuiltUp         0.291697185308862738662\n          land_use_groupedWater           0.000000000073816844615\n          hfp_std                         0.133991081290897179334\n          I(hfp_std^2)                    0.045568557037963267065\n          log_sl_                         0.000162818311340898577\n step_id_ (Intercept)                999999.999999999534338712692\n Std.Dev.               Corr                                               \n    0.23573289598371641                                                    \n    0.00101304845909713 0.0000000000                                       \n    0.30477380473462051 0.0000000000 0.0000000000                          \n    0.54008997890061128 0.0000000000 0.0000000000 0.0000000000             \n    0.00000859167298115 0.0000000000 0.0000000000 0.0000000000 0.0000000000\n    0.36604792212345255 0.0000000000 0.0000000000 0.0000000000 0.0000000000\n    0.21346792976455098 0.0000000000 0.0000000000 0.0000000000 0.0000000000\n    0.01276002787382922 0.0000000000 0.0000000000 0.0000000000 0.0000000000\n  999.99999999999977263                                                    \n                                        \n                                        \n                                        \n                                        \n                                        \n                                        \n 0.0000000000                           \n 0.0000000000 0.0000000000              \n 0.0000000000 0.0000000000 0.0000000000 \n                                        \nNumber of obs: 666248, groups:  id, 29; step_id_, 60568\n\nConditional model:\n                                               Estimate        Std. Error\nland_use_groupedTreeCover             -3.07415237263530  4.06357353906574\nland_use_groupedOpen                  -2.79647615761533  4.06333210682469\nland_use_groupedCropland              -2.81931195637970  4.06476791135366\nland_use_groupedBuiltUp               -3.51586768431280  4.07061289162120\nland_use_groupedWater                 -3.97072475008586  4.06726356134943\nhfp_std                                0.26364575880263  0.06987204820331\nI(hfp_std^2)                          -0.18623510016481  0.04184690448278\nlog_sl_                                0.00762730782932  0.00350259889805\nland_use_groupedOpen:hfp_std          -0.12437566061456  0.01375973081389\nland_use_groupedCropland:hfp_std      -0.30262763397863  0.09314011859347\nland_use_groupedBuiltUp:hfp_std       -0.26818040273319  0.29901482998733\nland_use_groupedWater:hfp_std         -0.72006498135142  0.23621406872803\nland_use_groupedOpen:I(hfp_std^2)      0.00189272090425  0.00563742378047\nland_use_groupedCropland:I(hfp_std^2)  0.02483888060471  0.02441783916909\nland_use_groupedBuiltUp:I(hfp_std^2)   0.01714227509713  0.06724878760432\nland_use_groupedWater:I(hfp_std^2)     0.14380651822655  0.05644843084569\n                                       z value               Pr(>|z|)    \nland_use_groupedTreeCover             -0.75651             0.44934077    \nland_use_groupedOpen                  -0.68822             0.49131274    \nland_use_groupedCropland              -0.69360             0.48793480    \nland_use_groupedBuiltUp               -0.86372             0.38774201    \nland_use_groupedWater                 -0.97626             0.32893344    \nhfp_std                                3.77327             0.00016112 ***\nI(hfp_std^2)                          -4.45039           0.0000085714 ***\nlog_sl_                                2.17761             0.02943480 *  \nland_use_groupedOpen:hfp_std          -9.03911 < 0.000000000000000222 ***\nland_use_groupedCropland:hfp_std      -3.24917             0.00115744 ** \nland_use_groupedBuiltUp:hfp_std       -0.89688             0.36978299    \nland_use_groupedWater:hfp_std         -3.04836             0.00230096 ** \nland_use_groupedOpen:I(hfp_std^2)      0.33574             0.73706530    \nland_use_groupedCropland:I(hfp_std^2)  1.01724             0.30903775    \nland_use_groupedBuiltUp:I(hfp_std^2)   0.25491             0.79879391    \nland_use_groupedWater:I(hfp_std^2)     2.54757             0.01084750 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Estimate marginal trends (linear + quadratic) of HFP across land use types\nemtrends(ssf_coyote, ~ land_use_grouped, var = \"hfp_std\", max.degree = 2) |>\n  summary(infer = c(TRUE, TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndegree = linear:\n land_use_grouped hfp_std.trend     SE  df asymp.LCL asymp.UCL z.ratio p.value\n TreeCover              0.26595 0.0699 Inf   0.12903    0.4029   3.807  0.0001\n Open                   0.14155 0.0701 Inf   0.00413    0.2790   2.019  0.0435\n Cropland              -0.03698 0.1150 Inf  -0.26270    0.1887  -0.321  0.7481\n BuiltUp               -0.00244 0.3070 Inf  -0.60481    0.5999  -0.008  0.9937\n Water                 -0.45589 0.2460 Inf  -0.93880    0.0270  -1.850  0.0643\n\ndegree = quadratic:\n land_use_grouped hfp_std.trend     SE  df asymp.LCL asymp.UCL z.ratio p.value\n TreeCover             -0.18624 0.0418 Inf  -0.26825   -0.1042  -4.450  <.0001\n Open                  -0.18434 0.0419 Inf  -0.26638   -0.1023  -4.404  <.0001\n Cropland              -0.16140 0.0482 Inf  -0.25590   -0.0669  -3.347  0.0008\n BuiltUp               -0.16909 0.0790 Inf  -0.32398   -0.0142  -2.140  0.0324\n Water                 -0.04243 0.0700 Inf  -0.17967    0.0948  -0.606  0.5446\n\nConfidence level used: 0.95 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Test for overdispersion \ncheck_overdispersion(ssf_coyote)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Overdispersion test\n\n       dispersion ratio =      0.908\n  Pearson's Chi-Squared = 604911.890\n                p-value =          1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo overdispersion detected.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate VIFs\ncheck_collinearity(ssf_coyote)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nModel has no intercept. VIFs may not be sensible.\nModel has interaction terms. VIFs might be inflated.\n  Try to center the variables used for the interaction, or check\n  multicollinearity among predictors of a model without interaction terms.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF       VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n land_use_grouped 3.94 [  3.92,   3.95]         1.98      0.25     [0.25, 0.26]\n          hfp_std 1.01 [  1.01,   1.01]         1.00      0.99     [0.99, 0.99]\n     I(hfp_std^2) 1.01 [  1.00,   1.01]         1.00      0.99     [0.99, 1.00]\n          log_sl_ 1.00 [  1.00,   1.12]         1.00      1.00     [0.89, 1.00]\n\nHigh Correlation\n\n                          Term    VIF       VIF 95% CI Increased SE Tolerance\n      land_use_grouped:hfp_std 311.45 [309.97, 312.95]        17.65  3.21e-03\n land_use_grouped:I(hfp_std^2) 159.97 [159.21, 160.74]        12.65  6.25e-03\n Tolerance 95% CI\n     [0.00, 0.00]\n     [0.01, 0.01]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot predicted vs. observed use\ncoyote_ssf_data$predicted <- predict(ssf_coyote, type = \"response\")\nggplot(coyote_ssf_data, aes(x = predicted, fill = as.factor(case_binary_), color = as.factor(case_binary_))) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(\n    values = c(\"1\" = \"#DB4743FF\", \"0\" = \"#FEF4D5FF\"),\n    name = \"Step type\",\n    labels = c(\"1\" = \"Used\", \"0\" = \"Available\")) +\n  scale_color_manual(\n    values = c(\"1\" = \"#DB4743FF\", \"0\" = \"#FEF4D5FF\"),\n    name = \"Step type\",\n    labels = c(\"1\" = \"Used\", \"0\" = \"Available\")) +\n  theme_publication_dark(legend_position = \"right\") +\n  labs(x = \"Predicted relative use (exp(η))\", y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](preprocessing_SSF_complete_files/figure-html/unnamed-chunk-1-6.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"img/coyote_predicted_vs_used.png\", width = 10, height = 5.5, dpi = 300)\n\n# 4. Bobcat SSF Modeling --------------------------------------------------\n# Read SSF ready data and filter\nbobcat_ssf_data <- readRDS(\"data/bobcat_ssf_data.rds\") |> \n  filter(n > 100) # Select animals with more than 100 fixes\n\n# Standardize HFP for modeling\nbobcat_ssf_data$hfp_std <- scale(bobcat_ssf_data$human_footprint)[, 1]\n\n# Counts of used (1) vs. available (0) per land use category\ntable(case = bobcat_ssf_data$case_binary_, \n      land_use = bobcat_ssf_data$land_use_grouped)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    land_use\ncase TreeCover Shrubland  Open Cropland BuiltUp Snow and ice Water Mangroves\n   0     81184         0 22729      293      89            1   144         0\n   1      8743         0  1693        6       1            0     1         0\n```\n\n\n:::\n\n```{.r .cell-code}\n# Dropping land use groups with too few used steps\n# (virtually no variation in case status)\nbobcat_ssf_filtered <- bobcat_ssf_data |> \n   filter(!(land_use_grouped %in% c(\"BuiltUp\", \"Snow and ice\", \"Water\", \"Cropland\")))\n\n# Fit SSF with glmmTMB following Muff et al. (2019)\nssf_bobcat <- glmmTMB(\n  case_binary_ ~ -1 + \n    land_use_grouped * (hfp_std + I(hfp_std^2)) + \n    log_sl_ + \n    (0 + land_use_grouped + hfp_std + I(hfp_std^2) + log_sl_|| id) +\n    (1 | step_id_),\n  family = poisson,\n  doFit = TRUE,\n  data = bobcat_ssf_filtered,\n  map = list(theta = factor(c(1:5, NA))),\n  start = list(theta = c(rep(0, times = 5),log(1e3))),\n  control = glmmTMBControl(parallel = nt)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in finalizeTMB(TMBStruc, obj, fit, h, data.tmb.old): Model convergence\nproblem; non-positive-definite Hessian matrix. See vignette('troubleshooting')\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in finalizeTMB(TMBStruc, obj, fit, h, data.tmb.old): Model convergence\nproblem; false convergence (8). See vignette('troubleshooting'),\nhelp('diagnose')\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(ssf_bobcat)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in sqrt(diag(vcovs)): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: poisson  ( log )\nFormula:          \ncase_binary_ ~ -1 + land_use_grouped * (hfp_std + I(hfp_std^2)) +  \n    log_sl_ + (0 + land_use_grouped + hfp_std + I(hfp_std^2) +  \n    log_sl_ || id) + (1 | step_id_)\nData: bobcat_ssf_filtered\n\n      AIC       BIC    logLik -2*log(L)  df.resid \n       NA        NA        NA        NA    114337 \n\nRandom effects:\n\nConditional model:\n Groups   Name                      Variance                     \n id       land_use_groupedTreeCover       0.013219238045356882655\n          land_use_groupedOpen            0.226065145559517732821\n          hfp_std                         0.020753855645735262009\n          I(hfp_std^2)                    0.004506640749211077851\n          log_sl_                         0.000000000160353087181\n step_id_ (Intercept)                999999.999999999534338712692\n Std.Dev.              Corr                                                \n    0.1149749452939939                                                     \n    0.4754630853804717 0.0000000000                                        \n    0.1440619854289648 0.0000000000 0.0000000000                           \n    0.0671315182996115 0.0000000000 0.0000000000 0.0000000000              \n    0.0000126630599454 0.0000000000 0.0000000000 0.0000000000 0.0000000000 \n  999.9999999999997726                                                     \nNumber of obs: 114349, groups:  id, 26; step_id_, 10444\n\nConditional model:\n                                           Estimate        Std. Error  z value\nland_use_groupedTreeCover         -10.9769533774590               NaN      NaN\nland_use_groupedOpen              -11.3751196336811               NaN      NaN\nhfp_std                             0.0403235126003   0.0379662328199  1.06209\nI(hfp_std^2)                       -0.0615865734820   0.0238307836011 -2.58433\nlog_sl_                            -0.0285534772954   0.0083628069420 -3.41434\nland_use_groupedOpen:hfp_std       -0.0371044728576   0.0352825642128 -1.05164\nland_use_groupedOpen:I(hfp_std^2)  -0.0216425372659   0.0239449911762 -0.90384\n                                    Pr(>|z|)    \nland_use_groupedTreeCover                NaN    \nland_use_groupedOpen                     NaN    \nhfp_std                           0.28819535    \nI(hfp_std^2)                      0.00975688 ** \nlog_sl_                           0.00063936 ***\nland_use_groupedOpen:hfp_std      0.29296583    \nland_use_groupedOpen:I(hfp_std^2) 0.36607811    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Bobcat model does not converge when trying to model random slopes for habitat covariates. \n# The model would have to be simplified to a point where it cannot follow the suggested method by Muff et al.\n# Dropping land groups with too few usable steps greatly reduces the ecological richness of the model.\n# The bobcat data cannot support a full, comparable SSF with interaction between habitat and human footprint.\n# Bobcats are excluded from the final SSF analysis.\n\n# 4. SSF Results Visualization --------------------------------------------\n# 4.1 Predict for average effect plots ------------------------------------\nif (file.exists(\"data/coyote_ssf_pred.rds\")) {\n  coyote_ssf_pred <- readRDS(\"data/coyote_ssf_pred.rds\")\n} else {\n  coyote_ssf_pred <- coyote_ssf_data |>\n    filter(case_binary_ == 0) |> # remove ID for population-level prediction\n    mutate(id = NA)\n  \n  coy_pred <- predict(ssf_coyote, coyote_ssf_pred, re.form = NA, se.fit = TRUE)\n  coyote_ssf_pred$fit <- coy_pred$fit\n  coyote_ssf_pred$se <- coy_pred$se\n  coyote_ssf_pred <- coyote_ssf_pred |> ungroup()\n  \n  saveRDS(coyote_ssf_pred, \"data/coyote_ssf_pred.rds\")\n}\n\n# 4.2 Average-effect plot function ----------------------------------------\navg_eff_plot_hfp_landuse <- function(fittedResponse,\n                                     nsim = 10, k = 10,\n                                     showPeakValue = TRUE,\n                                     save_path = NULL,\n                                     width = 10, height = 5.5, dpi = 300) {\n  \n  set.seed(123)\n  \n  fit_sample_matrix <- replicate(nsim, {\n    rnorm(n = nrow(fittedResponse), mean = fittedResponse$fit, sd = fittedResponse$se)\n  })\n  \n  smooth_list <- purrr::map(1:nsim, function(j) {\n    mgcv::bam(\n      fit_sample_matrix[, j] ~ s(human_footprint, by = land_use_grouped,\n                                 bs = \"ts\", k = k) + land_use_grouped,\n      data    = fittedResponse,\n      select  = TRUE, discrete = TRUE,\n      nthreads = nt\n    ) |>\n      gratia::smooth_estimates(overall_uncertainty = TRUE) |>\n      gratia::add_confint() |>\n      dplyr::rename(hfp = human_footprint)\n  })\n  \n  avg_smooth <- bind_rows(smooth_list) |>\n    group_by(.smooth, .by, land_use_grouped, hfp) |>\n    summarise(\n      est       = mean(.estimate),\n      lower_ci  = mean(.lower_ci),\n      upper_ci  = mean(.upper_ci),\n      .groups   = \"drop\"\n    ) |>\n    mutate(land_use_grouped = factor(\n      land_use_grouped,\n      levels = c(\"TreeCover\", \"Open\", \"Cropland\", \"BuiltUp\", \"Water\"))\n    )\n  \n  p <- ggplot(avg_smooth,\n              aes(x = hfp, y = est, colour = land_use_grouped, fill = land_use_grouped)) +\n    geom_hline(yintercept = 0,  linetype = \"dashed\", colour = \"gray50\") +\n    geom_vline(xintercept = 0, linetype = \"dotted\", colour = \"gray70\") +\n    geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, colour = NA) +\n    geom_line(linewidth = 1.2) +\n    facet_wrap(~land_use_grouped, scales = \"fixed\", nrow = 2) +\n    scale_colour_manual(values = landuse_colors) +\n    scale_fill_manual(values   = landuse_colors) +\n    labs(\n      x = \"Human footprint index (0–50)\",\n      y = \"Estimated relative use (log)\",\n    ) +\n    theme_publication_dark(legend_position = \"none\")\n  \n  if (showPeakValue) {\n    peak_vals <- avg_smooth |>\n      group_by(land_use_grouped) |>\n      filter(est == max(est)) |>\n      slice(rep(1:n(), each = 2)) |>\n      mutate(est = ifelse(row_number() %% 2 == 1, est, -Inf))\n    \n    p <- p + geom_line(\n      data = peak_vals,\n      aes(x = hfp, y = est, group = land_use_grouped, colour = land_use_grouped),\n      linetype = \"dashed\", linewidth = 0.8, alpha = 0.6)\n  }\n  \n  if (!is.null(save_path))\n    ggsave(save_path, p, width = width, height = height, dpi = dpi)\n  \n  return(p)\n}\n\n# 4.3 Relative-selection-strength (RSS) function --------------------------\ncalc_rss_hfp_landuse <- function(model, data,\n                                 land_use_col = \"land_use_grouped\",\n                                 hfp_col      = \"hfp_std\",\n                                 n_points     = 100,\n                                 ci_level     = 0.95,\n                                 landuse_cols     = landuse_colors,\n                                 landuse_cols_sec = landuse_colors,\n                                 save_path = NULL,\n                                 width = 10, height = 5.5, dpi = 300) {\n  \n  rss_df <- purrr::map_dfr(unique(data[[land_use_col]]), function(lc) {\n    \n    dat_lc  <- dplyr::filter(data, !!rlang::sym(land_use_col) == lc)\n    hfp_seq <- seq(min(dat_lc[[hfp_col]], na.rm = TRUE),\n                   max(dat_lc[[hfp_col]], na.rm = TRUE),\n                   length.out = n_points)\n    \n    newdata <- expand.grid(hfp_std = hfp_seq, land_use_grouped = lc) |>\n      dplyr::mutate(\n        `I(hfp_std^2)` = hfp_std^2,\n        log_sl_        = mean(data$log_sl_, na.rm = TRUE),\n        step_id_ = NA, id = NA, case_binary_ = 1\n      )\n    \n    baseline <- dplyr::filter(newdata, hfp_std == min(hfp_std))\n    \n    x1_pred <- predict(model, newdata,               re.form = NA)\n    x2_pred <- predict(model, baseline[rep(1, nrow(newdata)), ], re.form = NA)\n    \n    mm_terms <- delete.response(terms(model))\n    X1 <- model.matrix(mm_terms, newdata)\n    X2 <- model.matrix(mm_terms, baseline[rep(1, nrow(newdata)), ])\n    delta_X <- X1 - X2\n    \n    vc        <- vcov(model)$cond\n    keep_cols <- intersect(colnames(delta_X), colnames(vc))\n    delta_X   <- delta_X[, keep_cols, drop = FALSE]\n    vc        <- vc[keep_cols, keep_cols, drop = FALSE]\n    \n    se_pred <- sqrt(rowSums((delta_X %*% vc) * delta_X))\n    z_val   <- qnorm(1 - (1 - ci_level) / 2)\n    \n    tibble::tibble(\n      land_use_grouped = lc,\n      hfp_std          = hfp_seq,\n      human_footprint  = hfp_seq * sd(data$human_footprint, na.rm = TRUE) +\n        mean(data$human_footprint, na.rm = TRUE),\n      logRSS    = x1_pred - x2_pred,\n      RSS       = exp(logRSS),\n      RSS_lower = exp(logRSS - z_val * se_pred),\n      RSS_upper = exp(logRSS + z_val * se_pred)\n    )\n  })\n  \n  p <- ggplot(rss_df,\n              aes(x = human_footprint, y = RSS,\n                  colour = land_use_grouped, fill = land_use_grouped)) +\n    geom_hline(yintercept = 1, linetype = \"dashed\", colour = \"grey50\") +\n    geom_ribbon(aes(ymin = RSS_lower, ymax = RSS_upper),\n                alpha = 0.2, colour = NA) +\n    geom_line(linewidth = 1.1) +\n    scale_colour_manual(values = landuse_cols) +\n    scale_fill_manual(values  = landuse_cols_sec) +\n    labs(\n      x = \"Human footprint index (0–50)\",\n      y = \"Relative selection strength (RSS)\",\n      colour = \"Land cover type\", fill = \"Land cover type\"\n    ) +\n    theme_publication_dark(legend_position = \"bottom\")\n  \n  if (!is.null(save_path))\n    ggsave(save_path, p, width = width, height = height, dpi = dpi)\n  \n  return(p)\n}\n\n# 4.4 Generate and plot average effect ------------------------------------\np_avg_effect <- avg_eff_plot_hfp_landuse(coyote_ssf_pred, nsim = 1000, save_path = \"img/avg_effect.png\")\nprint(p_avg_effect)\n```\n\n::: {.cell-output-display}\n![](preprocessing_SSF_complete_files/figure-html/unnamed-chunk-1-7.png){width=672}\n:::\n\n```{.r .cell-code}\n# Report peaks\np_avg_effect$plot_env$peak_vals\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n# Groups:   land_use_grouped [5]\n   .smooth               .by   land_use_grouped    hfp     est lower_ci upper_ci\n   <chr>                 <chr> <fct>             <dbl>   <dbl>    <dbl>    <dbl>\n 1 s(human_footprint):l… land… TreeCover        10.1      2.15    1.96      2.34\n 2 s(human_footprint):l… land… TreeCover        10.1   -Inf       1.96      2.34\n 3 s(human_footprint):l… land… Open              8.99     2.36    2.18      2.54\n 4 s(human_footprint):l… land… Open              8.99  -Inf       2.18      2.54\n 5 s(human_footprint):l… land… Cropland          5.91     2.30    1.94      2.67\n 6 s(human_footprint):l… land… Cropland          5.91  -Inf       1.94      2.67\n 7 s(human_footprint):l… land… BuiltUp           0.131    3.29    0.288     6.29\n 8 s(human_footprint):l… land… BuiltUp           0.131 -Inf       0.288     6.29\n 9 s(human_footprint):l… land… Water             0.131    2.79    1.82      3.77\n10 s(human_footprint):l… land… Water             0.131 -Inf       1.82      3.77\n```\n\n\n:::\n\n```{.r .cell-code}\n# 4.5 Generate and plot RSS -----------------------------------------------\np_rss <- calc_rss_hfp_landuse(ssf_coyote, coyote_ssf_data, save_path = \"img/rss.png\")\nprint(p_rss)\n```\n\n::: {.cell-output-display}\n![](preprocessing_SSF_complete_files/figure-html/unnamed-chunk-1-8.png){width=672}\n:::\n:::\n",
    "supporting": [
      "preprocessing_SSF_complete_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}