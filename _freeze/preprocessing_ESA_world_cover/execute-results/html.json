{
  "hash": "c62750e24b2153f11fb3f95495d2a90f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Preprocessing: ESA world cover\"\nformat: html\nfreeze: auto\n---\n\n\n\n# Load libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  rstac,       # For accessing STAC APIs\n  sf,\n  terra,\n  tidyverse,\n  tidyterra,\n  rnaturalearth,\n  ggplot2\n)\n```\n:::\n\n\n\n# Load WA state boundary (for analysis) and animal tracking buffer (for the figure)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwa_boundary <- ne_states(\n  country = \"United States of America\",\n  returnclass = \"sf\") |>\n  filter(name == \"Washington\") |>\n  st_transform(\"EPSG:4326\")  # Convert to WGS84\n\n# From https://www.movebank.org/cms/webapp?gwt_fragment=page%3Dstudies%2Cpath%3Dstudy2636372210\ntracking_data <- read_delim(\"data/bobcat_coyotes_wa_gps.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 121706 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): gps:fix-type-raw, mortality-status, sensor-type, individual-taxon-...\ndbl  (6): event-id, location-long, location-lat, gps:hdop, gps:satellite-cou...\nlgl  (1): visible\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert to SF object (WGS84)\nanimal_sf <- tracking_data |>\n  st_as_sf(\n    coords = c(\"location-long\", \"location-lat\"),\n    crs = 4326\n  )\n```\n:::\n\n\n\n# Download the data if we don't have it yet\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesa_data = file.path(getwd(), \"data/esa-worldcover/v200/2021/map\")\nif(!file.exists(esa_data)) {\n  # Connect to Microsoft Planetary Computer STAC\n  stac_api <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\")\n  \n  # Search for ESA WorldCover 2021 data within study area\n  esa_items <- stac_search(\n    q = stac_api,\n    collections = \"esa-worldcover\",\n    datetime = \"2021-01-01/2021-12-31\",  # 2021 version\n    bbox = st_bbox(study_area),          # Study area bounding box\n    limit = 100\n  ) |>\n    get_request() |>\n    items_sign(sign_planetary_computer())  # Authenticate\n  \n  # Download all assets\n  assets_download(\n    items = esa_items,\n    asset_names = \"map\",\n    output_dir = file.path(getwd(), \"data/\"),\n    overwrite = TRUE\n  )\n}\n```\n:::\n\n\n\n# Process the data and write it to file\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get all downloaded tiles\nesa_tiles <- list.files(\n  path = esa_data,\n  pattern = \"\\\\.tif$\",\n  full.names = TRUE\n)\n\n# Merge and crop tiles to study area\nland_cover <- esa_tiles |>\n  lapply(rast) |>\n  (\\(x) do.call(merge, x))() |>\n  crop(vect(wa_boundary)) |>\n  mask(vect(wa_boundary))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n|---------|---------|---------|---------|\n=========================================\n                                          \n```\n\n\n:::\n\n```{.r .cell-code}\n# Save the final cropped/merged land cover\nwriteRaster(\n  land_cover,\n  \"data/ESA_washington.tif\",   # Output filename\n  overwrite = TRUE,            # Overwrite if exists\n  datatype = \"INT1U\",          # Optimize for categorical data\n  gdal = c(\"COMPRESS=LZW\")     # Reduce file size\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n```\n\n\n:::\n:::\n\n\n\n# Adjusted plot using the same land use grouping as is used in analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the raster data\nland_cover <- rast(\"data/ESA_washington.tif\")\n\n# Define the reclassification matrix\nreclassification_matrix <- matrix(c(\n  10, 1,  # Tree cover -> 1\n  20, 2,  # Open -> 2\n  30, 2,  # Open -> 2\n  40, 3,  # Cropland -> 3\n  50, 4,  # Built-up -> 4\n  60, 2,  # Open -> 2\n  70, 2,  # Open -> 2\n  80, 5,  # Water -> 5\n  90, 5,  # Water -> 5\n  95, 5,  # Water -> 5\n  100, 2  # Open -> 2\n), ncol = 2, byrow = TRUE)\n\n# Reclassify the raster using the matrix\nland_cover_grouped <- classify(land_cover, reclassification_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert the reclassified raster to a factor for plotting\nland_cover_grouped <- as.factor(land_cover_grouped)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n```\n\n\n:::\n\n```{.r .cell-code}\n# Define the plot\nggplot() +\n  tidyterra::geom_spatraster(\n    data = land_cover_grouped,\n    maxcell = 1e6\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"1\" = \"#7C873EFF\",   # Tree cover\n      \"2\" = \"#FEF4D5FF\",   # Open (Grassland, Bare/sparse vegetation, Moss and lichen)\n      \"3\" = \"#F5AF4DFF\",   # Cropland\n      \"4\" = \"#DB4743FF\",   # Built-up\n      \"5\" = \"#5495CFFF\"    # Water (Permanent water bodies, Herbaceous wetland)\n    ),\n    labels = c(\"Tree Cover\", \"Open\", \"Cropland\", \"Built-up\", \"Water\"),\n    na.translate = FALSE,\n    name = \"Land cover category\"\n  ) +\n  geom_sf(\n    data = animal_sf,\n    aes(color = `individual-taxon-canonical-name`),\n    size = 0.2,\n    alpha = 1\n  ) +\n  scale_color_manual(values = c(\"Lynx rufus\" = \"gray10\", \"Canis latrans\" = \"gray30\"), \n                     labels = c(\n                       expression(italic(\"Lynx rufus\")),\n                       expression(italic(\"Canis latrans\"))\n                     ),\n                     name = \"Species\") +\n  coord_sf(\n    xlim = c(-120.75, -117.1),\n    ylim = c(47, 49),\n    expand = FALSE\n  ) +\n  # Dark Theme (matching SSF plots)\n  theme(\n    legend.position = \"right\",\n    text = element_text(color = \"white\"),\n    axis.text = element_text(color = \"white\"),\n    panel.background = element_rect(fill = \"#222222\", color = NA),\n    plot.background  = element_rect(fill = \"#222222\", colour = NA),\n    panel.grid = element_blank(), \n    axis.ticks = element_blank(),\n    legend.background = element_rect(fill = \"#222222\", color = NA),\n    legend.key = element_rect(fill = \"#222222\", color = NA),\n    strip.text = element_text(color = \"white\", size = 10),\n    plot.title = element_text(margin = margin(b = 15)),\n    axis.title.x = element_text(margin = margin(t = 15)),\n    axis.title.y = element_text(margin = margin(r = 15)),\n    plot.margin = margin(20, 20, 20, 20, unit = \"pt\")\n  ) +\n  guides(\n    color = guide_legend(\n      order = 1,\n      override.aes = list(\n        size = 5,\n        shape = 21, \n        fill = c(\"black\", \"gray30\"), \n        color = \"white\", \n        stroke = 0.2\n      )\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n<SpatRaster> resampled to 1001415 cells.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](preprocessing_ESA_world_cover_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"img/land_cover.png\",\n         bg = \"#222222\",\n         width = 10, height = 6.73,\n         dpi = 300)\n```\n:::\n",
    "supporting": [
      "preprocessing_ESA_world_cover_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}