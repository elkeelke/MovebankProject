{
  "hash": "18aa9bc71777998eb82a284cab77f80c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"HFP subsetting\"\nformat: html\nfreeze: auto\n---\n\n\n\n# Load libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  sf,\n  terra,\n  tidyverse,\n  rnaturalearth\n)\n```\n:::\n\n\n\n# Load WA state boundary\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Washington boundary in Mollweide\nwa_boundary <- ne_states(\n  country = \"United States of America\",\n  returnclass = \"sf\") |>\n  filter(name == \"Washington\") |>\n  st_transform(\"ESRI:54009\")  # Convert to Mollweide\n```\n:::\n\n\n\n# Get list of all human footprint data tiles (ca. 20 GB of data)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download as a tgz from https://datadryad.org/downloads/file_stream/2679334 \n# and extract to the given directory\ntif_files <- list.files(\"data/hfp-100m-2020/\", pattern = \"\\\\.tif$\", full.names = TRUE)\n```\n:::\n\n\n\n# Identify relevant tiles and process them\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_overlap <- function(tif_file, boundary) {\n  r <- rast(tif_file)\n  r_extent <- ext(r)\n  r_poly <- st_as_sfc(st_bbox(r_extent)) |> \n    st_set_crs(crs(r))\n  return(st_intersects(r_poly, boundary, sparse = FALSE)[1,1])\n}\n\noverlap_results <- sapply(tif_files, check_overlap, boundary = wa_boundary)\nrelevant_files <- tif_files[overlap_results]\n\nhfp_combined <- relevant_files |>\n  map(rast) |>\n  (\\(x) do.call(merge, x))() |>\n  crop(vect(wa_boundary)) |>\n  mask(vect(wa_boundary))\n```\n:::\n\n\n\n# Project to WGS 84\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Length of 1 degree longitude at latitude φ ≈ 111,320 × cos(φ) meters\n# cos(48°) ≈ 0.6691\n# So 1° longitude ≈ 111,320 × 0.6691 ≈ 74,500 meters\n# 1° latitude is still ≈ 111,000 meters\n# Divide 100 by 111,000 and 74,500 to match resolution\nhfp_wgs84 <- project(\n  hfp_combined, \"EPSG:4326\",\n  method = \"near\", # Using nearest neighbor method for data integrity\n  res = c(0.00134, 0.0009)) # (x, y) = (long, lat)\nplot(hfp_wgs84)\n```\n\n::: {.cell-output-display}\n![](preprocessing_HFP_subsetting_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n# Save the final cropped HFP raster\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteRaster(\n  hfp_wgs84,\n  \"data/HFP_washington.tif\",\n  overwrite = TRUE,\n  datatype = \"FLT4S\",          # Maintain decimal precision for HFP values\n  gdal = c(\"COMPRESS=LZW\")     # Reduce file size\n)\n```\n:::\n\n\n\n# Adjusted plot for correctly scaled HFP and consistent theme\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntracking_data <- read_delim(\"data/bobcat_coyotes_wa_gps.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 121706 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): gps:fix-type-raw, mortality-status, sensor-type, individual-taxon-...\ndbl  (6): event-id, location-long, location-lat, gps:hdop, gps:satellite-cou...\nlgl  (1): visible\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nanimal_sf <- tracking_data |>\n  st_as_sf(\n    coords = c(\"location-long\", \"location-lat\"),\n    crs = 4326  # WGS84\n  )\n\nhfp <- rast(\"data/HFP_washington.tif\")\nNAflag(hfp) <- 64536  # Set no-data value\nhfp_capped <- classify(hfp, matrix(c(50000, Inf, 50000), ncol = 3, byrow = TRUE)) # Cap at 50k\nhfp_scaled <- hfp_capped/1000 # Scale to 0-50\n\nggplot() +\n  # Human Footprint Raster (using viridis option \"D\")\n  tidyterra::geom_spatraster(\n    data = hfp_scaled,\n    maxcell = 1e6\n  ) +\n  scale_fill_gradientn(\n    colors = c(\"#FFE6E6\", \"#FFAAAA\", \"#FF6B6B\", \"#FF0000\", \"#8B0000\"),  # Red to white\n    #colors = c(\"#606930\", \"#7C873EFF\", \"#FEF4D5FF\", \"#F5AF4DFF\", \"#DB4743FF\", \"#ab2521\"),  # Red to green\n    na.value = \"transparent\",\n    name = \"Human Footprint Index\"\n  ) +\n  \n  # Animal Tracking Data (consistent with your first plot)\n  geom_sf(\n    data = animal_sf,\n    aes(color = `individual-taxon-canonical-name`),\n    size = 0.2,\n    alpha = 1\n  ) +\n  scale_color_manual(\n    values = c(\"Lynx rufus\" = \"black\", \"Canis latrans\" = \"gray30\"),\n    labels = c(expression(italic(\"Lynx rufus\")), expression(italic(\"Canis latrans\"))),\n    name = \"Species\"\n  ) +\n  \n  # Coordinate System\n  coord_sf(\n    xlim = c(-120.75, -117.1),\n    ylim = c(47, 49),\n    expand = FALSE\n  ) +\n  \n  # Dark Theme (matching SSF plots)\n  theme(\n    legend.position = \"right\",\n    text = element_text(color = \"white\"),\n    axis.text = element_text(color = \"white\"),\n    panel.background = element_rect(fill = \"#222222\", color = NA),\n    plot.background  = element_rect(fill = \"#222222\", colour = NA),\n    panel.grid = element_blank(), \n    axis.ticks = element_blank(),\n    legend.background = element_rect(fill = \"#222222\", color = NA),\n    legend.key = element_rect(fill = \"#222222\", color = NA),\n    strip.text = element_text(color = \"white\", size = 10),\n    plot.title = element_text(margin = margin(b = 15)),\n    axis.title.x = element_text(margin = margin(t = 15)),\n    axis.title.y = element_text(margin = margin(r = 15)),\n    plot.margin = margin(20, 20, 20, 20, unit = \"pt\")\n  ) +\n  guides(\n    color = guide_legend(\n      order = 1,\n      override.aes = list(\n        size = 5,\n        shape = 21,\n        fill = c(\"black\", \"gray30\"),\n        color = \"white\",\n        stroke = 0.2\n      )\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n<SpatRaster> resampled to 1001952 cells.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](preprocessing_HFP_subsetting_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"img/hfp.png\",\n       bg = \"#222222\",\n       width = 10, height = 6.6,\n       dpi = 300)\n```\n:::\n",
    "supporting": [
      "preprocessing_HFP_subsetting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}