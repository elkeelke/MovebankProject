---
title: "Preprocessing: monthly home ranges"
format: html
freeze: auto
---

```{r}
library("dplyr")
library("move2")
library("units")
library("rnaturalearth")
library("lubridate")
library("sf")
library("readr")
library("ggplot2")

#' Flatten the array
#'
#' This function creates one big array out of an array of arrays.
#'
#' @param areas The arrays to flatten
#'
#' @return The flattened arrays
#' @export
flatten_array <- function(areas) {
  all_areas <- c()
  for (area in areas) {
    all_areas <- c(all_areas, area)
  }
  return(all_areas)
}

#' Calculate monthly home ranges
#'
#' This function downloads montly data from Movebank and performs home range calculation and plotting.
#'
#' @param ts_start The timestamp to start from
#' @param num_months The number of months to calculate for
#' @param study_id The Movebank study id
#' @param license_string_with_quotes The MD5 license string for Movebank download, with quotes included
#'
#' @return A list with a ggplot object and an array of home range sizes
#' @export
calculate_monthly_home_ranges <- function(ts_start, num_months, study_id, license_string_with_quotes, palette_colors) {
  areas <- list()
  mcp_list <- list()
  ts_end <- add_with_rollback(ts_start, months(1))

  for (i in 1:num_months) {
    print(i)
    tryCatch({
      foxes <- movebank_download_study(
        study_id = study_id,
        'license-md5' = license_string_with_quotes,
        timestamp_start = ts_start,
        timestamp_end = ts_end
      )
      
      tracks <- mt_track_lines(foxes)
      mcp <- st_convex_hull(tracks)
      areas[[i]] <- st_area(mcp)
      mcp_list[[i]] <- mcp
    }, error = function(e) {
      print(e)
    }, finally = {
      ts_start <- ts_end
      ts_end   <- add_with_rollback(ts_end, months(1))
    })
  }

  # Combine all monthly MCPs into one sf
  all_mcp <- do.call(rbind, mcp_list)

  # Create final ggplot (outline only)
  gg <- ggplot() +
    geom_sf(data = all_mcp, aes(color = as.factor(individual_local_identifier)), fill = NA, linewidth = 0.6) +
    scale_color_manual(values = palette_colors) +
    labs(x = "Longitude", y = "Latitude", color = "Fox ID") +
    theme_minimal(base_size = 14) +
    theme(
      legend.position = "right",
      text            = element_text(colour = "white"),
      axis.text       = element_text(colour = "white"),
      panel.background = element_rect(fill = "#222222", colour = NA),
      plot.background  = element_rect(fill = "#222222", colour = "#424242", linewidth = 0.75),
      panel.grid       = element_line(colour = "#424242"),
      legend.background = element_rect(fill = "#222222", colour = NA),
      legend.key        = element_rect(fill = "#222222", colour = NA),
      strip.text        = element_text(colour = "white", size = 10),
      plot.title        = element_text(margin = margin(b = 15)),
      axis.title.x      = element_text(margin = margin(t = 15)),
      axis.title.y      = element_text(margin = margin(r = 15)),
      plot.margin       = margin(20, 20, 20, 20, unit = "pt")
    )

  return(list(gg = gg, areas = flatten_array(areas)))
}
```

# Define colors for plots

```{r}
original_colors <- c(
  "#8B0000FF",
  "#B31A16FF",
  "#DB4743FF",
  "#F5AF4DFF",
  "#FEF4D5FF",
  "#7C873EFF",
  "#5495CFFF",
  "#2A5F8EFF",
  "#1A3D5CFF" 
)

color_interpolate <- function(color1, color2, n) {
  col1 <- col2rgb(color1)
  col2 <- col2rgb(color2)
  result <- character(n)
  for (i in 1:n) {
    r <- round(col1[1] + (col2[1] - col1[1]) * (i-1)/(n-1))
    g <- round(col1[2] + (col2[2] - col1[2]) * (i-1)/(n-1))
    b <- round(col1[3] + (col2[3] - col1[3]) * (i-1)/(n-1))
    result[i] <- rgb(r, g, b, maxColorValue = 255)
  }
  return(result)
}

segment1 <- color_interpolate(original_colors[1], original_colors[2], 3)
segment2 <- color_interpolate(original_colors[2], original_colors[3], 4)
segment3 <- color_interpolate(original_colors[3], original_colors[4], 7)
segment4 <- color_interpolate(original_colors[4], original_colors[5], 5)
segment5 <- color_interpolate(original_colors[5], original_colors[6], 8)
segment6 <- color_interpolate(original_colors[6], original_colors[7], 7)
segment7 <- color_interpolate(original_colors[7], original_colors[8], 4)
segment8 <- color_interpolate(original_colors[8], original_colors[9], 3)

gradient_palette <- c(
  segment1[1:2],
  segment2[1:3],
  segment3[1:6],
  segment4[1:4],
  segment5[1:8],
  segment6[1:6],
  segment7[1:3],
  segment8
)

length(gradient_palette)

bylot_colors <- c(original_colors[3], original_colors[7])
herschel_colors <- c(original_colors[4], original_colors[6])
wiltshire_colors <- gradient_palette

```


## Bylot

```{r}
results_bylot <- calculate_monthly_home_ranges(
  as.POSIXct("2011-07-01 00:00:00"), 44, 1371322147, '9559cb1b1cca51e9f3fd69812e5e22dc',
  palette_colors = bylot_colors
)

ggsave("img/bylot_monthly.png", results_bylot$gg, width = 10, height = 5.5, dpi = 300)

write_csv(data.frame(areas = results_bylot$areas), "data/output_bylot.csv")

```

## Herschel

```{r}
results_herschel <- calculate_monthly_home_ranges(
  as.POSIXct("2009-07-01 00:00:00"), 9, 1371529289, '436e8205d0c2973115e2024b146a6ad5',
  palette_colors = herschel_colors
)

ggsave("img/herschel_monthly.png", results_herschel$gg, width = 10, height = 4, dpi = 300)

write_csv(data.frame(areas = results_herschel$areas), "data/output_herschel.csv")

```

## Wiltshire

```{r}
results_wiltshire <- calculate_monthly_home_ranges(
  as.POSIXct("2016-01-01 00:00:00"), 43, 3179890710, 'ffa36f79defe10eac9fe70f6502a17e0',
  palette_colors = wiltshire_colors
)

ggsave("img/wiltshire_monthly.png", results_wiltshire$gg, width = 10, height = 7, dpi = 300)

write_csv(data.frame(areas = results_wiltshire$areas), "data/output_wiltshire.csv")

```
# Monthly boxplot

```{r}
#| label: red-fox-data-read-monthly-results
#| include: false
library("readr")
library("dplyr")
results_bylot <- read_delim("data/output_bylot.csv", delim = ";")
# Remove outlier from a month with little data due to collection timeframes
results_bylot <- results_bylot |> 
  filter(areas > 1000)
results_herschel <- read_delim("data/output_herschel.csv", delim = ";")
results_wiltshire <- read_delim("data/output_wiltshire.csv", delim = ";")
```

```{r}
#| label: red-fox-data-functions
#| include: false
remove_stats_outliers <- function(areas) {
  stats <- boxplot.stats(areas)
  outliers <- stats$out
  return(areas[!areas %in% outliers])
}
convert_m2_to_km2 <- function(area) {
  return(area * 0.000001)
}
```

```{r}
#| label: fig-home-ranges-boxplot
#| fig-cap: "Box plot comparing monthly home ranges (outliers removed)"
#| echo: false
#| warning: false

df <- data.frame(
  area = c(
    remove_stats_outliers(convert_m2_to_km2(results_bylot$areas)),
    remove_stats_outliers(convert_m2_to_km2(results_herschel$areas)),
    remove_stats_outliers(convert_m2_to_km2(results_wiltshire$areas))
  ),
  site = factor(
    rep(c("Bylot", "Herschel", "Wiltshire"), 
        times = c(
          length(remove_stats_outliers(convert_m2_to_km2(results_bylot$areas))),
          length(remove_stats_outliers(convert_m2_to_km2(results_herschel$areas))),
          length(remove_stats_outliers(convert_m2_to_km2(results_wiltshire$areas)))
        )),
    levels = c("Bylot", "Herschel", "Wiltshire")
  )
)


site_colors <- c(Bylot = "#DB4743FF", Herschel = "#5495CFFF", Wiltshire = "#AAAAAA")


ggplot(df, aes(x = site, y = area, fill = site, color = site)) +
  stat_boxplot(geom = "errorbar", width = 0.4, linewidth = 0.7) +
  geom_boxplot(outlier.alpha = 1, outlier.size = 0.5, width = 0.7, alpha = 1, linewidth = 0.5) +
  scale_y_log10(
    breaks = c(0.05, 0.5, 5, 50, 500),
    labels = c("0.05", "0.5", "5", "50", "500")
  ) +
  scale_fill_manual(name = "Source", values  = c(Bylot = "#723735",  Herschel = "#3c566e", Wiltshire = "#4c5133")) +
  scale_color_manual(name = "Source", values = c(Bylot = "#DB4743FF",  Herschel = "#5495CFFF", Wiltshire = "#7C873EFF")) +
  labs(
    x = NULL,
    y = expression(paste("Home range in ", km^2, " (log scale)"))
  ) +
  theme_minimal(base_size = 14) +
    theme(
      legend.position = "bottom",
      text = element_text(color = "white"),
      axis.text = element_text(color = "white"),
      panel.background = element_rect(fill = "#222222", color = NA),
      plot.background  = element_rect(fill = "#222222", colour = "#424242", linewidth = 0.75),
      panel.grid = element_line(color = "#424242"), 
      legend.background = element_rect(fill = "#222222", color = NA),
      legend.key = element_rect(fill = "#222222", color = NA),
      strip.text = element_text(color = "white", size = 10),
      plot.title = element_text(margin = margin(b = 15)),
      axis.title.x = element_text(margin = margin(t = 15)),
      axis.title.y = element_text(margin = margin(r = 15)),
      plot.margin = margin(20, 20, 20, 20, unit = "pt")
    ) +
  theme(panel.grid.major.x = element_blank())

ggsave("img/boxplot_monthly.png", width = 8, height = 5, dpi = 300)

```