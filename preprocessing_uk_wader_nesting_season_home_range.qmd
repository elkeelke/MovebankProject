---
title: "Preprocessing: UK wader nesting season home range"
format: html
freeze: auto
---

## EDA over all the study data

```{r}
library("dplyr")
library("move2")
library("units")
library("rnaturalearth")
library("webshot2")

foxes_wiltshire <- movebank_download_study(
  study_id = 3179890710,
  sensor_type_id = c("gps"),
  'license-md5'='ffa36f79defe10eac9fe70f6502a17e0',
  attributes = NULL
)
foxes_bylot <- movebank_download_study(
  study_id = 1371322147,
  'license-md5'='9559cb1b1cca51e9f3fd69812e5e22dc',
  attributes = NULL
)
foxes_herschel <- movebank_download_study(
  study_id = 1371529289,
  'license-md5'='436e8205d0c2973115e2024b146a6ad5',
  attributes = NULL
)
```

### Check if the data looks correct (i.e., positioned on the correct island)
# Updated maps

```{r}
library(sf)
library(ggplot2)
library(ggspatial)
library(maptiles)

bylot_tracks <- mt_track_lines(foxes_bylot)
herschel_tracks <- mt_track_lines(foxes_herschel)
wilt_tracks <- mt_track_lines(foxes_wiltshire)

make_track_map <- function(lines_sf,
                           bbox = NULL,
                           buffer_dist = 0,
                           tile_provider = "Esri.WorldTopoMap",
                           zoom = NULL,
                           line_color = "#DB4743FF",
                           map_title = "Tracks") {
  
  lines_3857 <- st_transform(lines_sf, 3857)
  
  if (is.null(bbox)) {
    buf <- st_buffer(lines_sf, buffer_dist)
    bbox <- st_bbox(buf)
  } else {
    bbox <- st_bbox(setNames(bbox, c("xmin", "ymin", "xmax", "ymax")), crs = 4326)
  }
  
  bbox_sfc <- st_as_sfc(bbox) %>% st_transform(3857)
  bbox_merc <- st_bbox(bbox_sfc)
  
  tile_raster <- tryCatch({
    get_tiles(bbox_merc, provider = tile_provider, zoom = zoom, crop = TRUE)
  }, error = function(e) {
    message("Tile download failed: ", e$message)
    NULL
  })
  
  x_range <- bbox_merc["xmax"] - bbox_merc["xmin"]
  y_range <- bbox_merc["ymax"] - bbox_merc["ymin"]
  plot_aspect <- y_range / x_range
  
  gg <- ggplot() +
    {if(!is.null(tile_raster)) layer_spatial(tile_raster)} +
    geom_sf(data = lines_3857, color = line_color, linewidth = 0.5) +
    annotation_scale(location = "bl", width_hint = .25) +
    annotation_north_arrow(location = "tl",
                           which_north = "true",
                           style = north_arrow_fancy_orienteering) +
    coord_sf(xlim = c(bbox_merc["xmin"], bbox_merc["xmax"]),
             ylim = c(bbox_merc["ymin"], bbox_merc["ymax"]),
             expand = FALSE) +
    labs(title = map_title, caption = "Â© ESRI World Topographic Map") +
    theme(
      legend.position = "none",
      text = element_text(color = "white"),
      axis.text = element_text(color = "white"),
      panel.background = element_rect(fill = "#222222", color = NA),
      plot.background  = element_rect(fill = "#222222", colour = "#424242", linewidth = 0.75),
      panel.grid = element_blank(), 
      axis.ticks = element_blank(),
      legend.background = element_rect(fill = "#222222", color = NA),
      legend.key = element_rect(fill = "#222222", color = NA),
      strip.text = element_text(color = "white", size = 10),
      plot.title = element_text(margin = margin(b = 15)),
      axis.title.x = element_text(margin = margin(t = 15)),
      axis.title.y = element_text(margin = margin(r = 15)),
      plot.margin = margin(20, 20, 20, 20, unit = "pt")
    ) 
  
  return(gg)
}

# Bylot Island
bylot_bbox <- c(-82.3935,72.4252,-76.1245,74.1815)
make_track_map(bylot_tracks, bbox = bylot_bbox, zoom = 7, map_title = "Bylot Island fox tracks")
ggsave("img/bylot_map.png", width = 5, height = 5)

# Herschel Island
herschel_bbox <- c(-143.9052,68.6598,-137.6362,70.7787)
make_track_map(herschel_tracks, bbox = herschel_bbox, zoom = 7, map_title = "Herschel Island fox tracks")
ggsave("img/herschel_map.png", width = 5, height = 5)

# Wiltshire
wilt_bbox <- c(-2.162845,50.748204,-1.13013,51.128108)
make_track_map(wilt_tracks, bbox = wilt_bbox, zoom = 10, map_title = "Wiltshire fox tracks")
ggsave("img/wiltshire_map.png", width = 10, height = 6)

```


## Produce the counts for data per month and per year breakdowns

```{r}
library("lubridate")
library("sf")
counts_herschel <- data.frame(foxes_herschel) |> 
  mutate(source = as.character("Herschel")) |>
  select(source, timestamp)
st_drop_geometry(counts_herschel)
counts_bylot <- data.frame(foxes_bylot) |> 
  mutate(source = as.character("Bylot")) |>
  select(source, timestamp)
st_drop_geometry(counts_bylot)
counts_wiltshire <- data.frame(foxes_wiltshire) |> 
  mutate(source = as.character("Wiltshire")) |>
  select(source, timestamp)
st_drop_geometry(counts_wiltshire)

combined_data <- bind_rows(counts_herschel, counts_bylot, counts_wiltshire)
combined_data <- combined_data |>
  mutate(date = as.Date(timestamp), month = month(timestamp), year = as.integer(year(timestamp)))
year_count <- combined_data |>
  group_by(source, year) |>
  summarise(count = n())
month_count <- combined_data |>
  group_by(source, month) |>
  summarise(count = n())
```

## Count visualization

```{r}
library("ggplot2")

ggplot(year_count, aes(x = factor(year), y = count, color = source, fill = source)) +
  geom_bar(stat = "identity", width = 0.5) +
  facet_wrap(~ ifelse(source %in% c("Bylot", "Herschel"), "Bylot/Herschel", "Wiltshire"), scales = "free_y") +
  labs(x = "Year", y = "Number of data points", fill = "Source", color = "Source") +
  scale_fill_manual(values = c(
    "Bylot"     = "#DB4743FF",
    "Herschel"  = "#7C873EFF",
    "Wiltshire" = "#5495CFFF"
  )) +
  scale_color_manual(values = c(
    "Bylot"     = "#DB4743FF",
    "Herschel"  = "#7C873EFF",
    "Wiltshire" = "#5495CFFF"
  )) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "bottom",
    text            = element_text(colour = "white"),
    axis.text       = element_text(colour = "white"),
    axis.text.x     = element_text(angle  = 90, size   = 6, margin = margin(b = 20)),
    axis.text.y     = element_text(margin = margin(l = 20)),
    panel.background = element_rect(fill = "#222222", colour = NA),
    plot.background  = element_rect(fill = "#222222", colour = "#424242", linewidth = 0.75),
    panel.grid       = element_line(colour = "#424242"),
    legend.background = element_rect(fill = "#222222", colour = NA),
    legend.key        = element_rect(fill = "#222222", colour = NA),
    strip.text   = element_text(colour = "white", size = 14, margin = margin (b =15)),
    plot.title   = element_text(margin = margin(b = 15)),
    axis.title.x = element_text(margin = margin(t = 15)),
    axis.title.y = element_text(margin = margin(r = 15)),
    plot.margin  = margin(20, 20, 20, 20, unit = "pt")
  )

ggsave("img/year_count.png", width = 10, height = 4.5, dpi = 300)
```

```{r}
month_count$month_name <- factor(month.abb[month_count$month], levels = month.abb)

ggplot(month_count, aes(x = month_name, y = count, color = source)) +
  geom_point(size = 4.5) +  # dots large enough to match the bar visual weight
  facet_wrap(~ ifelse(source %in% c("Bylot", "Herschel"), "Bylot/Herschel", "Wiltshire"),
             scales = "free_y") +
  labs(
    x = "Month",
    y = "Number of data points",
    color = "Source"
  ) +
  scale_color_manual(values = c(
    "Bylot"     = "#DB4743FF",
    "Herschel"  = "#7C873EFF",
    "Wiltshire" = "#5495CFFF"
  )) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "bottom",
    text            = element_text(colour = "white"),
    axis.text       = element_text(colour = "white"),
    axis.text.x     = element_text(angle  = 90, size = 6, margin = margin(b = 20)),
    axis.text.y     = element_text(margin = margin(l = 20)),
    panel.background = element_rect(fill = "#222222", colour = NA),
    plot.background  = element_rect(fill = "#222222", colour = "#424242", linewidth = 0.75),
    panel.grid       = element_line(colour = "#424242"),
    legend.background = element_rect(fill = "#222222", colour = NA),
    legend.key        = element_rect(fill = "#222222", colour = NA),
    strip.text        = element_text(colour = "white", size = 14, margin = margin(b = 15)),
    plot.title        = element_text(margin = margin(b = 15)),
    axis.title.x      = element_text(margin = margin(t = 15)),
    axis.title.y      = element_text(margin = margin(r = 15)),
    plot.margin       = margin(20, 20, 20, 20, unit = "pt")
  )

ggsave("img/month_count.png", width = 10, height = 4.5, dpi = 300)
```

## Download filtered data for the UK wader nesting season

```{r}
foxes_wiltshire_filtered <- movebank_download_study(
  study_id = 3179890710,
  sensor_type_id = c("gps"),
  'license-md5'='ffa36f79defe10eac9fe70f6502a17e0',
  timestamp_start = as.POSIXct("2019-03-15 00:00:00"),
  timestamp_end = as.POSIXct("2019-06-15 23:59:00")
)
foxes_bylot_filtered <- movebank_download_study(
  study_id = 1371322147,
  'license-md5'='9559cb1b1cca51e9f3fd69812e5e22dc',
  timestamp_start = as.POSIXct("2012-03-15 00:00:00"),
  timestamp_end = as.POSIXct("2012-06-15 23:59:00")
)  
```

## Produce home range plots and medians

```{r}
#| label: fig-home-ranges-bylot
#| echo: false
#| warning: false
#| fig-cap: "Home ranges for Bylot foxes (March 15th to June 15th, 2012)"
library("ggplot2")
bylot_tracks <- mt_track_lines(foxes_bylot_filtered)
bylot_mcp <- st_convex_hull(bylot_tracks)

bylot_colors <- c("#DB4743FF","#5495CFFF")

bylot_centroids <- st_centroid(bylot_mcp)

ggplot() +
  geom_sf(data = bylot_mcp, aes(color = individual_local_identifier), fill = NA, linewidth = 0.4) +
  geom_sf(data = bylot_centroids, aes(color = individual_local_identifier), shape = 3, size = 2) +
  scale_color_manual(values = bylot_colors) +
  labs(x = "Longitude", y = "Latitude", color = "Fox ID") +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "right",
    text            = element_text(colour = "white"),
    axis.text       = element_text(colour = "white"),
    panel.background = element_rect(fill = "#222222", colour = NA),
    plot.background  = element_rect(fill = "#222222", colour = "#424242", linewidth = 0.75),
    panel.grid       = element_line(colour = "#424242"),
    legend.background = element_rect(fill = "#222222", colour = NA),
    legend.key        = element_rect(fill = "#222222", colour = NA),
    strip.text        = element_text(colour = "white", size = 10),
    plot.title        = element_text(margin = margin(b = 15)),
    axis.title.x      = element_text(margin = margin(t = 15)),
    axis.title.y      = element_text(margin = margin(r = 15)),
    plot.margin       = margin(20, 20, 20, 20, unit = "pt")
  )


ggsave("img/home_range_bylot_wader.png", width = 10, height = 4.5, dpi = 300)
```

```{r}
#| label: fig-home-ranges-wiltshire
#| fig-cap: "Home ranges for Wiltshire foxes (March 15th to June 15th, 2019)"
#| echo: false
#| warning: false

wiltshire_tracks <- mt_track_lines(foxes_wiltshire_filtered)
wiltshire_mcp <- st_convex_hull(wiltshire_tracks)

wiltshire_colors <- c(
  "#FEF4D5FF",
  "#5495CFFF",
  "#DB4743FF",
  "#7C873EFF",
  "#F5AF4DFF",
  "#50C878FF",
  "#FF7F50FF",
  "#9370DBFF",
  "#FFD700FF",
  "#6495EDFF",
  "#FFB6C1FF",
  "#40E0D0FF")


wiltshire_centroids <- st_centroid(wiltshire_mcp)

ggplot() +
  geom_sf(data = wiltshire_mcp, aes(color = individual_local_identifier), fill = NA, linewidth = 0.4) +
  geom_sf(data = wiltshire_centroids, aes(color = individual_local_identifier), shape = 3, size = 2) +
  scale_color_manual(values = wiltshire_colors) +
  labs(x = "Longitude", y = "Latitude", color = "Fox ID") +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "right",
    text            = element_text(colour = "white"),
    axis.text       = element_text(colour = "white"),
    panel.background = element_rect(fill = "#222222", colour = NA),
    plot.background  = element_rect(fill = "#222222", colour = "#424242", linewidth = 0.75),
    panel.grid       = element_line(colour = "#424242"),
    legend.background = element_rect(fill = "#222222", colour = NA),
    legend.key        = element_rect(fill = "#222222", colour = NA),
    strip.text        = element_text(colour = "white", size = 10),
    plot.title        = element_text(margin = margin(b = 15)),
    axis.title.x      = element_text(margin = margin(t = 15)),
    axis.title.y      = element_text(margin = margin(r = 15)),
    plot.margin       = margin(20, 20, 20, 20, unit = "pt")
  )

ggsave("img/home_range_wiltshire_wader.png", width = 10, height = 4.5, dpi = 300)
```

```{r}
#| label: red-fox-data-filtered-medians
#| include: false
bylot_area <- st_area(bylot_mcp)
bylot_median <- median(bylot_area)
print(bylot_median)
wiltshire_area <- st_area(wiltshire_mcp)
wiltshire_median <- median(wiltshire_area)
print(wiltshire_median)
```

## Check if there is coordinate system related distortion in the results for Bylot islands, which is high up north

```{r}
convert_m2_to_km2 <- function(area) {
  return(area * 0.000001)
}

# EPSG:3154 NAD83(CSRS) / UTM zone 7N Herschel Island, also known as Qikiqtaruk,  69Â°35'23" N, 139Â°05'57" W

# This coordinate system covers them both: EPSG:3347 NAD83 / Statistics Canada Lambert
bylot_mcp_3347 <- st_transform(bylot_mcp, 3347)
print(convert_m2_to_km2(median(st_area(bylot_mcp_3347))))

# Bylot island is 11.067 km^2 large and split over two UTM zones:
# EPSG:2958	NAD83(CSRS) / UTM zone 17N
# EPSG:2959 NAD83(CSRS) / UTM zone 18N
# See what happens if we use the partial coordinate systems
bylot_mcp_2958 <- st_transform(bylot_mcp, 2958)
print(convert_m2_to_km2(median(st_area(bylot_mcp_2958))))
bylot_mcp_2959 <- st_transform(bylot_mcp, 2959)
print(convert_m2_to_km2(median(st_area(bylot_mcp_2959))))
```

## Download sampled filtered data for UK wader nesting season 

```{r}
#| label: red-fox-data-filtered-sampled
#| include: false
foxes_wiltshire_filtered_sampled_24h <- foxes_wiltshire_filtered |>
  mt_filter_per_interval(unit = "24 hours")
```

## Produce home range plots and medians

```{r}
#| label: fig-home-ranges-wiltshire-sampled24h
#| fig-cap: "Home ranges for Wiltshire foxes (March 15th to June 15th, 2019, 24 hour sampling interval)"
#| echo: false
#| warning: false

wiltshire_tracks <- mt_track_lines(foxes_wiltshire_filtered_sampled_24h)
wiltshire_mcp <- st_convex_hull(wiltshire_tracks)


# Plot
ggplot() +
  geom_sf(data = wiltshire_mcp, aes(color = individual_local_identifier), fill = NA, linewidth = 0.4) +
  geom_sf(data = wiltshire_centroids, aes(color = individual_local_identifier), shape = 3, size = 2) +
  scale_color_manual(values = wiltshire_colors) +
  labs(x = "Longitude", y = "Latitude", color = "Fox ID") +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "right",
    text            = element_text(colour = "white"),
    axis.text       = element_text(colour = "white"),
    panel.background = element_rect(fill = "#222222", colour = NA),
    plot.background  = element_rect(fill = "#222222", colour = "#424242", linewidth = 0.75),
    panel.grid       = element_line(colour = "#424242"),
    legend.background = element_rect(fill = "#222222", colour = NA),
    legend.key        = element_rect(fill = "#222222", colour = NA),
    strip.text        = element_text(colour = "white", size = 10),
    plot.title        = element_text(margin = margin(b = 15)),
    axis.title.x      = element_text(margin = margin(t = 15)),
    axis.title.y      = element_text(margin = margin(r = 15)),
    plot.margin       = margin(20, 20, 20, 20, unit = "pt")
  )

ggsave("img/home_range_wiltshire_wader_sampled.png", width = 10, height = 4.5, dpi = 300)
```

```{r}
#| label: red-fox-data-filtered-sampled-median
#| include: false
wiltshire_area <- st_area(wiltshire_mcp)
wiltshire_median <- median(wiltshire_area)
print(wiltshire_median)
```

