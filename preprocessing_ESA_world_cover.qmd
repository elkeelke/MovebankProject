---
title: "Preprocessing: ESA world cover"
format: html
freeze: auto
---

# Load libraries
```{r}
pacman::p_load(
  rstac,       # For accessing STAC APIs
  sf,
  terra,
  tidyverse,
  tidyterra,
  rnaturalearth,
  ggplot2
)
```

# Load WA state boundary (for analysis) and animal tracking buffer (for the figure)
```{r}
wa_boundary <- ne_states(
  country = "United States of America",
  returnclass = "sf") |>
  filter(name == "Washington") |>
  st_transform("EPSG:4326")  # Convert to WGS84

# From https://www.movebank.org/cms/webapp?gwt_fragment=page%3Dstudies%2Cpath%3Dstudy2636372210
tracking_data <- read_delim("data/bobcat_coyotes_wa_gps.csv")

# Convert to SF object (WGS84)
animal_sf <- tracking_data |>
  st_as_sf(
    coords = c("location-long", "location-lat"),
    crs = 4326
  )
```

# Download the data if we don't have it yet
```{r}
esa_data = file.path(getwd(), "data/esa-worldcover/v200/2021/map")
if(!file.exists(esa_data)) {
  # Connect to Microsoft Planetary Computer STAC
  stac_api <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
  
  # Search for ESA WorldCover 2021 data within study area
  esa_items <- stac_search(
    q = stac_api,
    collections = "esa-worldcover",
    datetime = "2021-01-01/2021-12-31",  # 2021 version
    bbox = st_bbox(study_area),          # Study area bounding box
    limit = 100
  ) |>
    get_request() |>
    items_sign(sign_planetary_computer())  # Authenticate
  
  # Download all assets
  assets_download(
    items = esa_items,
    asset_names = "map",
    output_dir = file.path(getwd(), "data/"),
    overwrite = TRUE
  )
}
```

# Process the data and write it to file
```{r}
# Get all downloaded tiles
esa_tiles <- list.files(
  path = esa_data,
  pattern = "\\.tif$",
  full.names = TRUE
)

# Merge and crop tiles to study area
land_cover <- esa_tiles |>
  lapply(rast) |>
  (\(x) do.call(merge, x))() |>
  crop(vect(wa_boundary)) |>
  mask(vect(wa_boundary))


# Save the final cropped/merged land cover
writeRaster(
  land_cover,
  "data/ESA_washington.tif",   # Output filename
  overwrite = TRUE,            # Overwrite if exists
  datatype = "INT1U",          # Optimize for categorical data
  gdal = c("COMPRESS=LZW")     # Reduce file size
)
```

# Adjusted plot using the same land use grouping as is used in analysis
```{r}
# Load the raster data
land_cover <- rast("data/ESA_washington.tif")

# Define the reclassification matrix
reclassification_matrix <- matrix(c(
  10, 1,  # Tree cover -> 1
  20, 2,  # Open -> 2
  30, 2,  # Open -> 2
  40, 3,  # Cropland -> 3
  50, 4,  # Built-up -> 4
  60, 2,  # Open -> 2
  70, 2,  # Open -> 2
  80, 5,  # Water -> 5
  90, 5,  # Water -> 5
  95, 5,  # Water -> 5
  100, 2  # Open -> 2
), ncol = 2, byrow = TRUE)

# Reclassify the raster using the matrix
land_cover_grouped <- classify(land_cover, reclassification_matrix)

# Convert the reclassified raster to a factor for plotting
land_cover_grouped <- as.factor(land_cover_grouped)

# Define the plot
ggplot() +
  tidyterra::geom_spatraster(
    data = land_cover_grouped,
    maxcell = 1e6
  ) +
  scale_fill_manual(
    values = c(
      "1" = "#7C873EFF",   # Tree cover
      "2" = "#FEF4D5FF",   # Open (Grassland, Bare/sparse vegetation, Moss and lichen)
      "3" = "#F5AF4DFF",   # Cropland
      "4" = "#DB4743FF",   # Built-up
      "5" = "#5495CFFF"    # Water (Permanent water bodies, Herbaceous wetland)
    ),
    labels = c("Tree Cover", "Open", "Cropland", "Built-up", "Water"),
    na.translate = FALSE,
    name = "Land cover category"
  ) +
  geom_sf(
    data = animal_sf,
    aes(color = `individual-taxon-canonical-name`),
    size = 0.2,
    alpha = 1
  ) +
  scale_color_manual(values = c("Lynx rufus" = "gray10", "Canis latrans" = "gray30"), 
                     labels = c(
                       expression(italic("Lynx rufus")),
                       expression(italic("Canis latrans"))
                     ),
                     name = "Species") +
  coord_sf(
    xlim = c(-120.75, -117.1),
    ylim = c(47, 49),
    expand = FALSE
  ) +
  # Dark Theme (matching SSF plots)
  theme(
    legend.position = "right",
    text = element_text(color = "white"),
    axis.text = element_text(color = "white"),
    panel.background = element_rect(fill = "#222222", color = NA),
    plot.background  = element_rect(fill = "#222222", colour = NA),
    panel.grid = element_blank(), 
    axis.ticks = element_blank(),
    legend.background = element_rect(fill = "#222222", color = NA),
    legend.key = element_rect(fill = "#222222", color = NA),
    strip.text = element_text(color = "white", size = 10),
    plot.title = element_text(margin = margin(b = 15)),
    axis.title.x = element_text(margin = margin(t = 15)),
    axis.title.y = element_text(margin = margin(r = 15)),
    plot.margin = margin(20, 20, 20, 20, unit = "pt")
  ) +
  guides(
    color = guide_legend(
      order = 1,
      override.aes = list(
        size = 5,
        shape = 21, 
        fill = c("black", "gray30"), 
        color = "white", 
        stroke = 0.2
      )
    )
  )
      
ggsave("img/land_cover.png",
         bg = "#222222",
         width = 10, height = 6.73,
         dpi = 300)

```

