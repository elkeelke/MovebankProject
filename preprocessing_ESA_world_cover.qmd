---
title: "Preprocessing: ESA world cover"
format: html
freeze: true
---

# Load libraries
```{r}
pacman::p_load(
  rstac,       # For accessing STAC APIs
  sf,
  terra,
  tidyverse,
  tidyterra,
  rnaturalearth,
  ggplot2
)
```

# Load WA state boundary (for analysis) and animal tracking buffer (for the figure)
```{r}
wa_boundary <- ne_states(
  country = "United States of America",
  returnclass = "sf") |>
  filter(name == "Washington") |>
  st_transform("EPSG:4326")  # Convert to WGS84

# From https://www.movebank.org/cms/webapp?gwt_fragment=page%3Dstudies%2Cpath%3Dstudy2636372210
tracking_data <- read_delim("data/bobcat_coyotes_wa_gps.csv")

# Convert to SF object (WGS84)
animal_sf <- tracking_data |>
  st_as_sf(
    coords = c("location-long", "location-lat"),
    crs = 4326
  )
```

# Download the data if we don't have it yet
```{r}
esa_data = file.path(getwd(), "data/esa-worldcover/v200/2021/map")
if(!file.exists(esa_data)) {
  # Connect to Microsoft Planetary Computer STAC
  stac_api <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
  
  # Search for ESA WorldCover 2021 data within study area
  esa_items <- stac_search(
    q = stac_api,
    collections = "esa-worldcover",
    datetime = "2021-01-01/2021-12-31",  # 2021 version
    bbox = st_bbox(study_area),          # Study area bounding box
    limit = 100
  ) |>
    get_request() |>
    items_sign(sign_planetary_computer())  # Authenticate
  
  # Download all assets
  assets_download(
    items = esa_items,
    asset_names = "map",
    output_dir = file.path(getwd(), "data/"),
    overwrite = TRUE
  )
}
```

# Process the data and write it to file
```{r}
# Get all downloaded tiles
esa_tiles <- list.files(
  path = esa_data,
  pattern = "\\.tif$",
  full.names = TRUE
)

# Merge and crop tiles to study area
land_cover <- esa_tiles |>
  lapply(rast) |>
  (\(x) do.call(merge, x))() |>
  crop(vect(wa_boundary)) |>
  mask(vect(wa_boundary))


# Save the final cropped/merged land cover
writeRaster(
  land_cover,
  "data/ESA_washington.tif",   # Output filename
  overwrite = TRUE,            # Overwrite if exists
  datatype = "INT1U",          # Optimize for categorical data
  gdal = c("COMPRESS=LZW")     # Reduce file size
)
```

# Create a zoomed in chart for the paper with animal tracks overlay
```{r}
# Class labels (ESA WorldCover 2021)
class_labels <- c(
  "10" = "Tree cover",
  "20" = "Shrubland",
  "30" = "Grassland",
  "40" = "Cropland",
  "50" = "Built-up",
  "60" = "Bare/sparse vegetation",
  "70" = "Snow and ice",
  "80" = "Permanent water bodies",
  "90" = "Herbaceous wetland",
  "95" = "Mangroves",
  "100" = "Moss and lichen"
)

# Convert to factor for plotting
land_cover <- as.factor(land_cover)

# Create plot
ggplot() +
  tidyterra::geom_spatraster(
    data = land_cover,
    maxcell = 1e6
  ) +
  scale_fill_manual(
    values = c(
      "10" = "#006400", "20" = "#FFBB22", "30" = "#FFFF4C",
      "40" = "#D2B48C", "50" = "#FA0000", "60" = "#B4B4B4",
      "70" = "#F0F0F0", "80" = "#0064C8", "90" = "#0096A0",
      "95" = "#00CF75", "100" = "#FAE6A0"
    ),
    labels = class_labels,
    na.translate = FALSE,
    name = "Land cover class"
  ) +
  geom_sf(
    data = animal_sf,
    aes(color = `individual-taxon-canonical-name`),
    size = 0.1,
    alpha = 0.7
  ) +
  scale_color_manual(values = c("Canis latrans" = "black", "Lynx rufus" = "white"), 
                     name = "Species") +
  coord_sf(
    xlim = c(-120.7, -117.1),
    ylim = c(47, 49),
    expand = FALSE
  ) +  
  theme(
    legend.background = element_rect(fill = "gray90", color = "black"),
  ) +
  guides(
    color = guide_legend(override.aes = list(size = 4)),
  )
ggsave("img/esa_landcover_study_area_with_animals.png")
```
